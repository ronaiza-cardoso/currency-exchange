{"version":3,"sources":["configs/Api.js","components/card.js","App.js","serviceWorker.js","index.js"],"names":["Api","card","Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_brlToEur","ev","setState","inputValue","target","value","calculedValude","state","BRL","_eurToBrl","console","log","brlValue","eurValue","_this2","fetch","API","then","r","json","result","rates","getFixedValue","catch","e","EUR_INPUT","focus","_this3","react_default","a","createElement","className","onChange","evt","ref","input","readOnly","Component","isNaN","parseFloat","Math","round","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAAeA,EACD,qDCsEdC,oBAlEI,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA6BVQ,UAAY,SAAAC,GACRR,EAAKS,SAAS,CACVC,WAAYF,EAAGG,OAAOC,MACtBC,eAAgBL,EAAGG,OAAOC,MAAQZ,EAAKc,MAAMC,OAjClCf,EAqCnBgB,UAAY,SAAAR,GAERS,QAAQC,IAAIV,EAAGG,OAAOC,OACtBK,QAAQC,IAAIlB,EAAKc,QAtCjBd,EAAKc,MAAQ,CACTK,SAAU,IACVC,SAAU,GACVL,IAAK,GACLF,eAAgB,IANLb,mFAUC,IAAAqB,EAAAlB,KAGZmB,MAAMC,GACDC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GAAM,OACRN,EAAKZ,SAAS,CACVM,IAAKY,EAAOC,MAAMb,IAClBF,eAAgBgB,EAAc,GAAKA,EAAcF,EAAOC,MAAMb,SAGrEe,MAAM,SAAAC,GACHd,QAAQC,IAAIa,KAIxB5B,KAAK6B,UAAUC,yCAiBV,IAAAC,EAAA/B,KAEL,OACIgC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SACIzB,MAAOT,KAAKW,MAAMM,SAClBmB,SAAU,SAAAC,GAAG,OAAIN,EAAK3B,UAAUiC,IAChCC,IAAK,SAAAC,GAAK,OAAIR,EAAKF,UAAYU,MAGvCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SACIzB,MAAOiB,EAAc1B,KAAKW,MAAMD,gBAChC8B,UAAQ,aA5DbC,cAqENf,EAAgB,SAAAjB,GACzB,OAAOiC,MAAMjC,GAAS,MAAQkC,WAAWC,KAAKC,MAAc,IAARpC,GAAe,MC5DxDqC,mLARX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACxC,EAAD,cAJU+C,aCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.a9d113f6.chunk.js","sourcesContent":["export default {\n    endpoint: 'https://api.exchangeratesapi.io/latest?symbols=BRL'\n}","import React, { Component } from 'react';\nimport API from '../configs/Api';\nimport '../App.css';\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            brlValue: '1',\n            eurValue: '',\n            BRL: '',\n            calculedValude: ''\n        };\n    }\n\n    componentDidMount() {\n        // Self-invoking function\n        (() => {\n            fetch(API.endpoint)\n                .then(r => r.json())\n                .then(result =>\n                    this.setState({\n                        BRL: result.rates.BRL,\n                        calculedValude: getFixedValue(1) * getFixedValue(result.rates.BRL)\n                    })\n                )\n                .catch(e => {\n                    console.log(e);\n                });\n        })();\n\n        this.EUR_INPUT.focus();\n\n    }\n\n    _brlToEur = ev => {\n        this.setState({\n            inputValue: ev.target.value,\n            calculedValude: ev.target.value * this.state.BRL\n        });\n    };\n\n    _eurToBrl = ev => {\n        // TODO: make the calc eur to brl\n        console.log(ev.target.value)\n        console.log(this.state)\n    };\n\n    render() {\n        // TODO: fix inputs\n        return (\n            <div className=\"card\">\n                <div className=\"input__container\">\n                    <label>EUR</label>\n                    <input\n                        value={this.state.eurValue}\n                        onChange={evt => this._brlToEur(evt)}\n                        ref={input => this.EUR_INPUT = input }\n                    />\n                </div>\n                <div className=\"input__container\">\n                    <label>BRL</label>\n                    <input\n                        value={getFixedValue(this.state.calculedValude)}\n                        readOnly\n                    />\n                </div>\n            </div>\n        );\n    }\n}\nexport default Card;\n\nexport const getFixedValue = value => {\n    return isNaN(value) ? 'NaN' : parseFloat(Math.round(value * 100) / 100);\n};\n","import React, { Component } from 'react';\nimport Card from './components/card';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Card/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}